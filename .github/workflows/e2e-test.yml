name: 🎯 E2E Tests & Report

on:
  workflow_dispatch:  # 수동 실행만 가능
    inputs:
      triggered_by:
        description: '테스트 실행 요청자'
        required: false
        default: 'Manual'
        type: string
      test_config:
        description: '테스트 설정'
        required: true
        default: 'full'
        type: choice
        options:
          - fast
          - full
          - debug

permissions:
  contents: write
  pages: write
  id-token: write
  actions: read

jobs:
  test:
    name: 🧪 Run E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 12

    outputs:
      test-results: ${{ steps.test-execution.outputs.results }}

    steps:
      - name: 📥 Checkout test repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js with enhanced caching
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: 📦 Cache node_modules
        uses: actions/cache@v4
        id: npm-cache
        with:
          path: node_modules
          key: npm-modules-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            npm-modules-${{ runner.os }}-

      - name: 📦 Install npm dependencies (if cache miss)
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: |
          echo "📥 npm 의존성 설치 중... (캐시 미스)"
          npm ci --prefer-offline --no-audit --no-fund --silent
          echo "✅ npm 의존성 설치 완료"

      - name: 📦 Skip npm install (cache hit)
        if: steps.npm-cache.outputs.cache-hit == 'true'
        run: echo "✅ npm 의존성 캐시 적중, 설치 건너뛰기"

      - name: 🎭 Cache Playwright browsers and system dependencies
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: |
            ~/.cache/ms-playwright
            ~/Library/Caches/ms-playwright
            %USERPROFILE%\AppData\Local\ms-playwright
            /usr/lib/x86_64-linux-gnu/
            /usr/share/
          key: playwright-full-${{ runner.os }}-${{ hashFiles('package-lock.json') }}-v2
          restore-keys: |
            playwright-full-${{ runner.os }}-
            playwright-full-

      - name: 🎭 Install Playwright browsers and dependencies (if cache miss)
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: |
          echo "📥 Playwright 브라우저 및 시스템 의존성 설치 중... (캐시 미스)"
          npx playwright install chromium --with-deps
          echo "✅ Playwright 전체 설치 완료"

      - name: 🎭 Verify cached Playwright setup (cache hit)
        if: steps.playwright-cache.outputs.cache-hit == 'true'
        run: |
          echo "✅ Playwright 캐시 적중! 설치 건너뛰기"
          echo "📋 캐시된 브라우저 확인:"
          ls -la ~/.cache/ms-playwright/ || echo "브라우저 캐시 확인 불가"
          echo "✅ 캐시된 설정으로 테스트 준비 완료"

      - name: 🧪 Run E2E tests with config
        id: test-execution
        run: |
          # 테스트 설정에 따라 다른 설정 파일 사용
          case "${{ github.event.inputs.test_config }}" in
            "fast")
              echo "🚀 Fast 모드로 테스트 실행"
              npm run test:fast
              ;;
            "full")
              echo "🔍 Full 모드로 테스트 실행"
              npm run test:ci
              ;;
            "debug")
              echo "🐛 Debug 모드로 테스트 실행"
              npm run test:debug
              ;;
            *)
              echo "🚀 기본 Fast 모드로 테스트 실행"
              npm run test:fast
              ;;
          esac
        continue-on-error: true

      - name: 🔍 Check test results (optimized)
        if: always()
        run: |
          echo "=== 테스트 결과 확인 ==="
          if [ -d "playwright-report" ]; then
            echo "✅ playwright-report 존재 ($(ls playwright-report/ | wc -l)개 파일)"
          else
            echo "❌ playwright-report 없음"
          fi

      - name: 📢 Notify completion (Success)
        if: success()
        run: |
          echo "🎉 E2E 테스트가 성공적으로 완료되었습니다!"
          echo "👤 실행자: ${{ github.event.inputs.triggered_by || github.actor }}"
          echo "📊 테스트 리포트가 곧 GitHub Pages에 배포됩니다."

      - name: 📢 Notify completion (Failure)
        if: failure()
        run: |
          echo "❌ E2E 테스트가 실패했습니다."
          echo "👤 실행자: ${{ github.event.inputs.triggered_by || github.actor }}"
          echo "🔍 로그를 확인하세요: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

      - name: 📊 Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: |
            playwright-report/
            test-results/
          retention-days: 30
          if-no-files-found: warn

  deploy-report:
    name: 🚀 Deploy Test Report to Current Repository
    needs: test
    runs-on: ubuntu-latest
    if: always()  # 테스트 실패해도 리포트는 배포

    steps:
      - name: 📥 Checkout current repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: 📥 Download test artifacts
        uses: actions/download-artifact@v4
        with:
          name: playwright-report
          path: ./artifacts
        continue-on-error: true

      - name: 🔍 Prepare test report for deployment
        run: |
          echo "=== 현재 레포지토리 정보 ==="
          pwd
          git status

          echo "=== 아티팩트 처리 ==="
          # docs 디렉토리 생성 (GitHub Pages 기본 경로)
          mkdir -p docs

          if [ -d "artifacts/playwright-report" ]; then
            echo "✅ Playwright 리포트 발견"
            cp -r artifacts/playwright-report/* docs/
          elif [ -d "artifacts" ] && [ "$(ls -A artifacts)" ]; then
            echo "✅ 아티팩트 파일들 발견"
            cp -r artifacts/* docs/
          else
            echo "⚠️ 아티팩트 없음, 기본 리포트 생성"
            echo "<h1>테스트 결과 없음</h1><p>테스트 아티팩트를 찾을 수 없습니다.</p>" > docs/index.html
          fi

          echo "=== docs 디렉토리 내용 확인 ==="
          ls -la docs/

      - name: 📝 Create enhanced index page
        run: |
          # Check if playwright report exists in docs
          REPORT_STATUS="❌ 리포트 없음"
          REPORT_LINK=""

          if [ -f "docs/index.html" ]; then
            LINE_COUNT=$(wc -l < docs/index.html)
            if [ "$LINE_COUNT" -gt 5 ]; then
              REPORT_STATUS="✅ 리포트 사용 가능"
              REPORT_LINK='<a href="./index.html" class="button">📋 전체 테스트 리포트 보기</a>'
            else
              REPORT_LINK='<span class="button disabled">📋 테스트 리포트 없음</span>'
            fi
          else
            REPORT_LINK='<span class="button disabled">📋 테스트 리포트 없음</span>'
          fi

          # 기존 index.html을 report.html로 백업
          if [ -f "docs/index.html" ]; then
            mv docs/index.html docs/report.html
            REPORT_LINK='<a href="./report.html" class="button">📋 전체 테스트 리포트 보기</a>'
          fi

          cat > docs/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="ko">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Hello Pet E2E Test Report</title>
            <style>
              body {
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                max-width: 800px;
                margin: 2rem auto;
                padding: 2rem;
                background: #f8fafc;
              }
              .header {
                text-align: center;
                margin-bottom: 3rem;
                padding: 2rem;
                background: white;
                border-radius: 12px;
                box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
              }
              .header h1 {
                color: #1e293b;
                margin: 0;
                font-size: 2.5rem;
              }
              .header p {
                color: #64748b;
                margin: 1rem 0 0 0;
                font-size: 1.1rem;
              }
              .card {
                background: white;
                padding: 2rem;
                border-radius: 12px;
                box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
                margin-bottom: 2rem;
              }
              .card h2 {
                color: #1e293b;
                margin-top: 0;
                font-size: 1.5rem;
              }
              .button {
                display: inline-block;
                background: linear-gradient(135deg, #3b82f6, #1d4ed8);
                color: white;
                padding: 1rem 2rem;
                text-decoration: none;
                border-radius: 8px;
                font-weight: 600;
                transition: transform 0.2s;
                margin: 0.5rem;
              }
              .button:hover {
                transform: translateY(-2px);
              }
              .button.disabled {
                background: #e2e8f0;
                color: #64748b;
                cursor: not-allowed;
              }
              .status {
                padding: 0.5rem 1rem;
                border-radius: 6px;
                font-weight: 600;
                margin-left: 1rem;
                font-size: 0.9rem;
              }
              .status.success {
                background: #dcfce7;
                color: #166534;
              }
              .status.error {
                background: #fef2f2;
                color: #dc2626;
              }
              .timestamp {
                color: #64748b;
                font-size: 0.9rem;
                text-align: center;
                margin-top: 2rem;
              }
              .info-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                gap: 1rem;
                margin-top: 1rem;
              }
              .info-item {
                background: #f8fafc;
                padding: 1rem;
                border-radius: 6px;
                border-left: 4px solid #3b82f6;
              }
              .info-item strong {
                display: block;
                color: #1e293b;
                margin-bottom: 0.5rem;
              }
            </style>
          </head>
          <body>
            <div class="header">
              <h1>🐾 Hello Pet E2E Test Report</h1>
              <p>자동화된 E2E 테스트 결과 리포트</p>
            </div>

            <div class="card">
              <h2>📊 테스트 리포트 <span class="status success">STATUS_PLACEHOLDER</span></h2>
              <p>Playwright로 실행된 E2E 테스트 결과를 확인할 수 있습니다.</p>
              REPORT_LINK_PLACEHOLDER
            </div>

            <div class="card">
              <h2>ℹ️ 테스트 실행 정보</h2>
              <div class="info-grid">
                <div class="info-item">
                  <strong>실행자</strong>
                  TRIGGERED_BY_PLACEHOLDER
                </div>
                <div class="info-item">
                  <strong>테스트 설정</strong>
                  TEST_CONFIG_PLACEHOLDER
                </div>
                <div class="info-item">
                  <strong>실행 시간</strong>
                  TIMESTAMP_PLACEHOLDER
                </div>
                <div class="info-item">
                  <strong>실행 ID</strong>
                  <a href="RUN_URL_PLACEHOLDER" target="_blank">RUN_ID_PLACEHOLDER</a>
                </div>
              </div>
            </div>

            <div class="card">
              <h2>🔧 테스트 환경</h2>
              <ul>
                <li><strong>테스트 환경:</strong> CI (GitHub Actions)</li>
                <li><strong>브라우저:</strong> Chromium (헤드리스)</li>
                <li><strong>테스트 대상:</strong> https://hello-pet.my</li>
                <li><strong>실행 방법:</strong> 수동 실행 (GitHub Actions 탭)</li>
                <li><strong>배포 위치:</strong> Current Repository GitHub Pages</li>
              </ul>
            </div>

            <div class="timestamp">
              🔄 자동 업데이트: TIMESTAMP_PLACEHOLDER
            </div>
          </body>
          </html>
          EOF

          # Replace placeholders with simple values
          CURRENT_TIME=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
          TRIGGERED_BY="${{ github.event.inputs.triggered_by || github.actor }}"
          TEST_CONFIG="${{ github.event.inputs.test_config || 'fast' }}"
          RUN_ID="${{ github.run_id }}"
          RUN_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          # Update status and create final HTML with proper encoding
          if [ -f "docs/report.html" ]; then
            STATUS_TEXT="✅ 리포트 사용 가능"
            REPORT_LINK='<a href="./report.html" class="button">📋 전체 테스트 리포트 보기</a>'
          else
            STATUS_TEXT="❌ 리포트 없음"
            REPORT_LINK='<span class="button disabled">📋 테스트 리포트 없음</span>'
          fi

          # Create final HTML with proper UTF-8 encoding using cat
          cat > docs/index.html << 'FINAL_EOF'
          <!DOCTYPE html>
          <html lang="ko">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Hello Pet E2E Test Report</title>
            <style>
              body {
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                max-width: 800px;
                margin: 2rem auto;
                padding: 2rem;
                background: #f8fafc;
              }
              .header {
                text-align: center;
                margin-bottom: 3rem;
                padding: 2rem;
                background: white;
                border-radius: 12px;
                box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
              }
              .header h1 {
                color: #1e293b;
                margin: 0;
                font-size: 2.5rem;
              }
              .header p {
                color: #64748b;
                margin: 1rem 0 0 0;
                font-size: 1.1rem;
              }
              .card {
                background: white;
                padding: 2rem;
                border-radius: 12px;
                box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
                margin-bottom: 2rem;
              }
              .card h2 {
                color: #1e293b;
                margin-top: 0;
                font-size: 1.5rem;
              }
              .button {
                display: inline-block;
                background: linear-gradient(135deg, #3b82f6, #1d4ed8);
                color: white;
                padding: 1rem 2rem;
                text-decoration: none;
                border-radius: 8px;
                font-weight: 600;
                transition: transform 0.2s;
                margin: 0.5rem;
              }
              .button:hover {
                transform: translateY(-2px);
              }
              .button.disabled {
                background: #e2e8f0;
                color: #64748b;
                cursor: not-allowed;
              }
              .status {
                padding: 0.5rem 1rem;
                border-radius: 6px;
                font-weight: 600;
                margin-left: 1rem;
                font-size: 0.9rem;
              }
              .status.success {
                background: #dcfce7;
                color: #166534;
              }
              .status.error {
                background: #fef2f2;
                color: #dc2626;
              }
              .timestamp {
                color: #64748b;
                font-size: 0.9rem;
                text-align: center;
                margin-top: 2rem;
              }
              .info-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                gap: 1rem;
                margin-top: 1rem;
              }
              .info-item {
                background: #f8fafc;
                padding: 1rem;
                border-radius: 6px;
                border-left: 4px solid #3b82f6;
              }
              .info-item strong {
                display: block;
                color: #1e293b;
                margin-bottom: 0.5rem;
              }
            </style>
          </head>
          <body>
            <div class="header">
              <h1>🐾 Hello Pet E2E Test Report</h1>
              <p>자동화된 E2E 테스트 결과 리포트</p>
            </div>

            <div class="card">
          FINAL_EOF

          # Append the status section with variables
          cat >> docs/index.html << EOF
              <h2>📊 테스트 리포트 <span class="status success">$STATUS_TEXT</span></h2>
              <p>Playwright로 실행된 E2E 테스트 결과를 확인할 수 있습니다.</p>
              $REPORT_LINK
            </div>

            <div class="card">
              <h2>ℹ️ 테스트 실행 정보</h2>
              <div class="info-grid">
                <div class="info-item">
                  <strong>실행자</strong>
                  $TRIGGERED_BY
                </div>
                <div class="info-item">
                  <strong>테스트 설정</strong>
                  $TEST_CONFIG
                </div>
                <div class="info-item">
                  <strong>실행 시간</strong>
                  $CURRENT_TIME
                </div>
                <div class="info-item">
                  <strong>실행 ID</strong>
                  <a href="$RUN_URL" target="_blank">$RUN_ID</a>
                </div>
              </div>
            </div>

            <div class="card">
              <h2>🔧 테스트 환경</h2>
              <ul>
                <li><strong>테스트 환경:</strong> CI (GitHub Actions)</li>
                <li><strong>브라우저:</strong> Chromium (헤드리스)</li>
                <li><strong>테스트 대상:</strong> https://hello-pet.my</li>
                <li><strong>실행 방법:</strong> 수동 실행 (GitHub Actions 탭)</li>
                <li><strong>배포 위치:</strong> Current Repository GitHub Pages</li>
              </ul>
            </div>

            <div class="timestamp">
              🔄 자동 업데이트: $CURRENT_TIME
            </div>
          </body>
          </html>
          EOF

          echo "✅ HTML 파일 생성 완료 (UTF-8 인코딩)"

      - name: 📤 Commit and push test results
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # .gitignore에 docs 폴더가 무시되지 않도록 확인
          if grep -q "^docs/$" .gitignore 2>/dev/null; then
            sed -i '/^docs\/$/d' .gitignore
            echo "✅ .gitignore에서 docs/ 제거"
          fi

          # release 브랜치 준비
          echo "📥 release 브랜치 준비 중..."
          git fetch origin release || echo "release 브랜치가 없으면 새로 생성됩니다"

          # release 브랜치로 체크아웃 (없으면 생성)
          if git show-ref --verify --quiet refs/remotes/origin/release; then
            echo "🔄 기존 release 브랜치로 체크아웃"
            git checkout -B release origin/release
          else
            echo "🆕 새로운 release 브랜치 생성"
            git checkout -b release
          fi

          git add docs/

          if git diff --staged --quiet; then
            echo "📝 변경사항 없음, 커밋 건너뛰기"
          else
            git commit -m "🤖 E2E 테스트 리포트 업데이트 by ${{ github.actor }}"

            # release 브랜치로 푸시
            echo "📤 release 브랜치로 푸시 중..."
            for i in {1..3}; do
              if git push origin release; then
                echo "✅ release 브랜치에 테스트 리포트 푸시 완료"
                break
              else
                echo "⚠️ 푸시 실패, 재시도 $i/3"
                if [ $i -lt 3 ]; then
                  git fetch origin release
                  git rebase origin/release
                  sleep 2
                else
                  echo "❌ 푸시 최종 실패"
                  exit 1
                fi
              fi
            done
          fi

      - name: 📢 Deployment notification
        if: always()
        run: |
          echo "🎉 E2E 테스트 완료 및 release 브랜치로 푸시!"
          echo "👤 실행자: ${{ github.event.inputs.triggered_by || github.actor }}"
          echo "📊 실행 ID: ${{ github.run_id }}"
          echo "🌿 브랜치: release"
          echo ""
          echo "🚀 GitHub Pages 자동 배포가 트리거됩니다:"
          echo "1. release 브랜치 푸시 감지"
          echo "2. '🚀 Deploy to GitHub Pages' 워크플로우 자동 실행"
          echo "3. GitHub Pages 자동 업데이트"
          echo ""
          echo "📁 테스트 결과: origin/release 브랜치의 docs/ 폴더"
